package main;

import configuracion.Parametros;
import java.awt.Color;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Contenedor <code>JPanel</code> desde donde se controlará al personaje y a otro nuevo 
 * <code>JPanel</code> que contendrá ya el conjunto de elementos que coforman el mapa
 * 
 * @author Sergio
 * @version 1.0, 6 Jun 2014
 */
public final class PanelJuego extends javax.swing.JPanel {

    private PantallaJuego pantallaActual;
    
    private Personaje personaje;
    private static PanelDialogo panelDialogo;
    
    private ArrayList<Nube> nube;
    
    /**
     * Constructor de <code>PanelJuego</code>
     * 
     * @param musica hilo musical del juego
     */
    public PanelJuego(Musica musica){
        initComponents();
        initMoreComponents();
        musica.cambiarMusica("dia");
    }
    
    /**
     * Instancia el <code>Personaje</code> y la <code>PantallaJuego</code>, activa 
     * el <code>Receptor</code> que escuchará al dispositivo móvil y lanza los
     * listener que controlarán el movimiento del personaje.
     * 
     * @see Personaje
     * @see PantallaJuego
     * @see Receptor
     */
    public void initMoreComponents(){
        this.setVisible(true);
        int idPantallaInicial = 1021;
        
        pantallaActual = new PantallaJuego(idPantallaInicial,this);
        personaje = new Personaje(pantallaActual);
        personaje.getHilo().start();   
        pantallaActual.setBounds(
                0,
                0,
                Parametros.getInstance().getANCHO_PANTALLA_JUEGO(),
                Parametros.getInstance().getALTO_PANTALLA_JUEGO()
            );
        add(pantallaActual,new Integer(0));
        
        panelDialogo = new PanelDialogo();
        panelDialogo.setBackground(Color.white);
        PantallaJuego.getCapaPantalla().add(panelDialogo,new Integer(100));
        colocaEfectos();
        
        //Mostramos u ocultamos efectos de Interior o exterior, segun corresponda, en el mapa inicial
        //NOTA: El ciclo dia/noche no va aqui al iniciar el mapa, sino en el propio personaje
        //que lo revisa continuamente.
        mostrarEfectos(!pantallaActual.isMapaInterior());
        
        //Activamos el receptor
        new Receptor();
        
        addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt) {
                getPersonaje().movimientoPJ(evt);
            }
        });
        
        addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                getPersonaje().pararPJ(evt);
            }
        });
    }
    
    /**
     * Crea varias nubes y las sitúa sobre la pantalla de juego
     */
    public void colocaEfectos(){
        
        nube = new ArrayList<>();
        try{
            nube.add(new Nube(configuracion.Tileset.getInstance(),50));
            nube.add(new Nube(configuracion.Tileset.getInstance(),200));
            nube.add(new Nube(configuracion.Tileset.getInstance(),225));
            nube.add(new Nube(configuracion.Tileset.getInstance(),400));
            nube.add(new Nube(configuracion.Tileset.getInstance(),175));

            for (int i = 0; i < nube.size(); i++) {
                PantallaJuego.getCapaPantalla().add(nube.get(i),new Integer(99));
                nube.get(i).getHilo().start();

            }
        }catch(ClassCastException cce){
            Logger.getLogger(PanelJuego.class.getName()).log(Level.SEVERE, null, cce);
            //Error de NimbusStyle que remite al constructor de la nube. ¿Por qué?
            //En cualquier caso, si da error, pues que salga el sol
        }
    }
    
    /**
     * Muestra u oculta las nubes en función del parámetro
     * @param hayEfectos 
     * <ul>
     *  <li><code>True</code>: Se mostrarán nubes.</li>
     *  <li><code>False</code>: Se ocultarán nubes.</li>
     * </ul>
     */
    public void mostrarEfectos(boolean hayEfectos){
        for (int i = 0; i < nube.size(); i++) {
            try{
                nube.get(i).setVisible(hayEfectos);
            }catch(NullPointerException npe){
                Logger.getLogger(PanelJuego.class.getName()).log(Level.SEVERE, null, npe);
            }
        }
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(640, 480));
        setMinimumSize(new java.awt.Dimension(640, 480));
        setPreferredSize(new java.awt.Dimension(640, 480));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Devuelve el atributo panelDialogo
     * @return El atributo panelDialogo
     */
    static PanelDialogo getPanelDialogo() {
        return panelDialogo;
    }
    
    /**
     * Devuelve el atributo pantallaActual
     * @return El atributo pantallaActual
     */
    public PantallaJuego getPantallaActual() {
        return pantallaActual;
    }

    /**
     * Devuelve el atributo personaje
     * @return El atributo personaje
     */
    public Personaje getPersonaje() {
        return personaje;
    }

    /**
     * Devuelve el <code>ArrayList</code> de nubes
     * @return El <code>ArrayList</code> de nubes
     */
    public ArrayList<Nube> getNube() {
        return nube;
    }

    /**
     * Fija el atributo pantallaActual
     * @param pantallaActual El atributo pantallaActual
     */
    public void setPantallaActual(PantallaJuego pantallaActual) {
        this.pantallaActual = pantallaActual;
    }
    
    
}
